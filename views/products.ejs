<%- include('partials/header') %>

<!-- CSRF Token for AJAX requests -->
<meta name="csrf-token" content="<%= typeof csrfToken !== 'undefined' ? csrfToken : '' %>">

<div class="top-banner">
    <div class="banner-content">
        <div class="shimmer-overlay"></div>
        <span class="banner-text">Premium Collection. Built to Last.</span>
        <a href="#products-grid" class="banner-cta">Shop Now →</a>
    </div>
</div>

<div class="collection-hero">
    <div class="floating-elements">
        <div class="floating-circle circle-1"></div>
        <div class="floating-circle circle-2"></div>
        <div class="floating-circle circle-3"></div>
        <div class="floating-square square-1"></div>
        <div class="floating-square square-2"></div>
    </div>
    <div class="hero-content">
        <h1 class="hero-title gradient-text">Premium Products</h1>
        <p class="hero-description">Discover our curated collection of high-quality products designed for excellence and crafted with precision.</p>
        <a href="#products-grid" class="hero-cta pulse-btn">
            <span>Browse Collection</span>
            <div class="btn-ripple"></div>
        </a>
    </div>
</div>

<div class="products-page">
    <div class="sidebar">
        <div class="filter-section">
            <div class="filter-title">MODELS</div>
            <form id="model-filter-form">                <% 
                    const selectedCategories = query.category ? query.category.split(',') : [];
                    categories.forEach(category => { 
                %>
                    <label class="filter-checkbox">
                        <input type="checkbox" name="model" value="<%= category.name %>" 
                               <%= selectedCategories.includes(category.name) ? 'checked' : '' %>>
                        <span class="checkmark"></span>
                        <span class="filter-label"><%= category.name %></span>
                    </label>
                <% }) %>
            </form>
            <div class="filter-title" style="margin-top:2.5rem;">OUR PRODUCTS</div>
            <div class="sidebar-sort-filter">
                <select name="sort" id="sort" onchange="window.location.href=this.value">
                    <option value="/products?sort=newest" <%= sort === 'newest' ? 'selected' : '' %>>Newest First</option>
                    <option value="/products?sort=price-low" <%= sort === 'price-low' ? 'selected' : '' %>>Price: Low to High</option>
                    <option value="/products?sort=price-high" <%= sort === 'price-high' ? 'selected' : '' %>>Price: High to Low</option>
                </select>
            </div>
            
            <!-- Size Guide Link -->
            <div class="size-guide-sidebar" style="margin-top: 2rem;">
                <a href="/size-guide" class="size-guide-link">
                    <svg class="size-guide-icon" width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                    <span>Size Guide</span>
                </a>
                <p class="size-guide-text">Find your perfect fit</p>
            </div>
        </div>
    </div>

    <div class="main-content">
        <div class="products-grid" id="products-grid">
            <% products.forEach((product, index) => { %>
                <div class="product-card nb-card" data-aos="fade-up" data-aos-delay="<%= index * 50 %>" data-product-id="<%= product._id %>">
                    <div class="card-glow"></div>
                    <div class="nb-image-section">
                        <% if (product.price === 99) { %>
                            <div class="nb-badge pulse-badge">
                                <span>SALE</span>
                                <div class="badge-shine"></div>
                            </div>
                        <% } %>
                        <div class="image-overlay">
                            <div class="overlay-content">
                                <button class="quick-add-btn modern-btn" onclick="quickAddToCart('<%= product._id %>')">
                                    <span>Quick Add</span>
                                    <div class="btn-bg"></div>
                                </button>
                                <button class="quick-view-btn modern-btn" onclick="quickView('<%= product._id %>')">
                                    <span>Quick View</span>
                                    <div class="btn-bg"></div>
                                </button>
                            </div>
                        </div>
                        <img src="<%= product.image %>" alt="<%= product.name %>" class="nb-image">
                        <div class="image-reflection"></div>
                    </div>
                    <div class="nb-swatches">
                        <% if (product.variants && product.variants.length) { %>
                            <% product.variants.forEach((variant, vIndex) => { %>
                                <div class="nb-swatch <%= vIndex === 0 ? 'active' : '' %>" 
                                     style="background-color: <%= variant.color %>" 
                                     title="<%= variant.color %>"
                                     data-image="<%= variant.image || product.image %>">
                                    <div class="swatch-ripple"></div>
                                </div>
                            <% }) %>
                        <% } else { %>
                            <div class="nb-swatch active" style="background-color: #000" title="Black" data-image="<%= product.image %>">
                                <div class="swatch-ripple"></div>
                            </div>
                        <% } %>
                    </div>
                    <div class="nb-info">
                        <div class="nb-title-row">
                            <a href="/products/<%= product._id %>" class="nb-title hover-underline"><%= product.name %></a>
                            <div class="favorite-btn" data-product-id="<%= product._id %>">
                                <div class="heart-animation">
                                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
                                    </svg>
                                </div>
                            </div>
                        </div>
                        <div class="nb-category"><%= product.category || 'Premium' %></div>
                        <div class="rating-section">
                            <div class="stars">
                                <% for(let i = 1; i <= 5; i++) { %>
                                    <span class="star <%= i <= 4 ? 'filled' : '' %>" style="animation-delay: <%= i * 0.1 %>s">★</span>
                                <% } %>
                            </div>
                            <span class="rating-count">(127)</span>
                        </div>
                        <div class="nb-bottom-row">
                            <span class="nb-price price-counter" data-price="<%= product.price %>"><%= product.price.toLocaleString() %> DH</span>
                            <form class="add-to-cart-form" onsubmit="addToCart(event, '<%= product._id %>')">
                                <input type="hidden" name="color" value="<%= product.color || 'Black' %>">
                                <input type="hidden" name="size" value="M">
                                <button type="submit" class="add-to-cart-btn modern-cart-btn">
                                    <div class="btn-content">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <circle cx="9" cy="21" r="1"></circle>
                                            <circle cx="20" cy="21" r="1"></circle>
                                            <path d="m1 1 4 4 2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
                                        </svg>
                                        <span>Add</span>
                                    </div>
                                    <div class="btn-loading">
                                        <div class="loading-spinner"></div>
                                    </div>
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            <% }) %>
        </div>

        <% if (pages > 1) { %>
            <div class="pagination">
                <% if (currentPage > 1) { %>
                    <a href="/products?page=<%= currentPage - 1 %>" class="btn">&laquo; Previous</a>
                <% } %>
                
                <% for(let i = 1; i <= pages; i++) { %>
                    <a href="/products?page=<%= i %>" 
                       class="btn <%= i === currentPage ? 'active' : '' %>">
                        <%= i %>
                    </a>
                <% } %>
                
                <% if (currentPage < pages) { %>
                    <a href="/products?page=<%= currentPage + 1 %>" class="btn">Next &raquo;</a>
                <% } %>
            </div>
        <% } %>
    </div>
</div>

<style>
/* Enhanced Modern Design with Animations */
.top-banner {
    background: linear-gradient(135deg, #000 0%, #333 100%);
    color: #fff;
    text-align: center;
    padding: 16px 20px;
    border-bottom: 1px solid #333;
    position: relative;
    overflow: hidden;
}

.shimmer-overlay {
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
    animation: shimmer 3s infinite;
}

@keyframes shimmer {
    0% { left: -100%; }
    100% { left: 100%; }
}

.banner-content {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 20px;
    flex-wrap: wrap;
    position: relative;
    z-index: 2;
}

.banner-text {
    font-size: 15px;
    font-weight: 600;
    color: #fff;
    letter-spacing: 0.5px;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
}

.banner-cta {
    color: #000;
    background: #fff;
    text-decoration: none;
    font-weight: 700;
    padding: 8px 16px;
    border: 2px solid #fff;
    border-radius: 4px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
}

.banner-cta::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(0,0,0,0.1), transparent);
    transition: left 0.5s ease;
}

.banner-cta:hover::before {
    left: 100%;
}

.banner-cta:hover {
    background: #000;
    color: #fff;
    border-color: #fff;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}

/* Enhanced Hero Section */
.collection-hero {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    color: #000;
    text-align: center;
    padding: 100px 20px;
    margin-bottom: 3rem;
    border-bottom: 1px solid #e0e0e0;
    position: relative;
    overflow: hidden;
}

.floating-elements {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 1;
}

.floating-circle, .floating-square {
    position: absolute;
    background: rgba(0,0,0,0.05);
    animation: float 6s ease-in-out infinite;
}

.floating-circle {
    border-radius: 50%;
}

.circle-1 {
    width: 80px;
    height: 80px;
    top: 20%;
    left: 10%;
    animation-delay: 0s;
}

.circle-2 {
    width: 60px;
    height: 60px;
    top: 60%;
    right: 15%;
    animation-delay: 2s;
}

.circle-3 {
    width: 40px;
    height: 40px;
    top: 30%;
    right: 30%;
    animation-delay: 4s;
}

.square-1 {
    width: 50px;
    height: 50px;
    top: 70%;
    left: 20%;
    animation-delay: 1s;
    transform: rotate(45deg);
}

.square-2 {
    width: 30px;
    height: 30px;
    top: 15%;
    right: 40%;
    animation-delay: 3s;
    transform: rotate(45deg);
}

@keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(180deg); }
}

.hero-content {
    max-width: 800px;
    margin: 0 auto;
    position: relative;
    z-index: 2;
}

.hero-title {
    font-size: 64px;
    font-weight: 900;
    margin-bottom: 24px;
    animation: fadeInUp 1s ease-out;
    line-height: 1.1;
}

.gradient-text {
    background: linear-gradient(135deg, #000 0%, #333 50%, #000 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    background-size: 200% 200%;
    animation: gradientShift 3s ease-in-out infinite;
}

@keyframes gradientShift {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
}

.hero-description {
    font-size: 20px;
    line-height: 1.7;
    color: #666;
    max-width: 650px;
    margin: 0 auto 40px;
    animation: fadeInUp 1s ease-out 0.2s both;
    font-weight: 400;
}

.hero-cta {
    display: inline-block;
    background: #000;
    color: #fff;
    text-decoration: none;
    font-weight: 700;
    padding: 18px 36px;
    border-radius: 50px;
    font-size: 16px;
    letter-spacing: 0.5px;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    border: 2px solid #000;
    animation: fadeInUp 1s ease-out 0.4s both;
    position: relative;
    overflow: hidden;
    text-transform: uppercase;
}

.pulse-btn {
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% { box-shadow: 0 0 0 0 rgba(0, 0, 0, 0.4); }
    70% { box-shadow: 0 0 0 10px rgba(0, 0, 0, 0); }
    100% { box-shadow: 0 0 0 0 rgba(0, 0, 0, 0); }
}

.btn-ripple {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: rgba(255,255,255,0.3);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
}

.hero-cta:hover .btn-ripple {
    width: 300px;
    height: 300px;
}

.hero-cta:hover {
    background: #fff;
    color: #000;
    border-color: #000;
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.2);
}

.products-page {
    display: flex;
    gap: 2rem;
    padding: 0 2rem;
    background: #fff;
}

.sidebar {
    width: 250px;
    flex-shrink: 0;
}

.main-content {
    flex-grow: 1;
}

.products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 2.5rem;
    padding: 0 1rem;
}

/* Enhanced Product Cards with Modern Animations */
.product-card {
    background: #fff;
    border: 2px solid #000;
    border-radius: 12px;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    min-height: 600px;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    overflow: hidden;
    position: relative;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
}

.card-glow {
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(45deg, #000, #333, #000);
    border-radius: 14px;
    opacity: 0;
    transition: opacity 0.4s ease;
    z-index: -1;
}

.product-card:hover .card-glow {
    opacity: 1;
    animation: glow-pulse 2s infinite;
}

@keyframes glow-pulse {
    0%, 100% { opacity: 0.5; }
    50% { opacity: 1; }
}

.product-card:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 20px 40px rgba(0,0,0,0.2);
}

.nb-image-section {
    position: relative;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    width: 100%;
    aspect-ratio: 1.2/1;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    border-bottom: 2px solid #000;
}

.nb-image {
    max-width: 90%;
    max-height: 260px;
    width: auto;
    height: auto;
    margin: 0 auto;
    display: block;
    object-fit: contain;
    background: transparent;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    filter: drop-shadow(0 4px 8px rgba(0,0,0,0.1));
}

.product-card:hover .nb-image {
    transform: scale(1.1) rotate(2deg);
}

.image-reflection {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 30%;
    background: linear-gradient(to top, rgba(255,255,255,0.1), transparent);
    pointer-events: none;
}

.image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(0,0,0,0.8), rgba(0,0,0,0.9));
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 3;
    backdrop-filter: blur(2px);
}

.product-card:hover .image-overlay {
    opacity: 1;
}

.overlay-content {
    display: flex;
    flex-direction: column;
    gap: 12px;
    transform: translateY(20px);
    transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
}

.product-card:hover .overlay-content {
    transform: translateY(0);
}

.modern-btn {
    background: #fff;
    color: #000;
    border: 2px solid #000;
    padding: 12px 24px;
    font-weight: 700;
    font-size: 14px;
    letter-spacing: 0.5px;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    text-transform: uppercase;
    border-radius: 25px;
    position: relative;
    overflow: hidden;
}

.btn-bg {
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: #000;
    transition: left 0.3s ease;
    z-index: -1;
}

.modern-btn:hover .btn-bg {
    left: 0;
}

.modern-btn:hover {
    color: #fff;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}

.quick-view-btn {
    background: transparent;
    color: #fff;
    border: 2px solid #fff;
}

.quick-view-btn .btn-bg {
    background: #fff;
}

.quick-view-btn:hover {
    color: #000;
}

.nb-badge {
    position: absolute;
    top: 15px;
    right: 15px;
    background: #000;
    color: #fff;
    font-size: 0.8rem;
    font-weight: 700;
    padding: 8px 16px;
    z-index: 4;
    text-transform: uppercase;
    letter-spacing: 1px;
    border-radius: 20px;
    position: relative;
    overflow: hidden;
}

.pulse-badge {
    animation: badge-pulse 2s infinite;
}

@keyframes badge-pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
}

.badge-shine {
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
    animation: badge-shine 2s infinite;
}

@keyframes badge-shine {
    0% { left: -100%; }
    100% { left: 100%; }
}

.nb-swatches {
    display: flex;
    gap: 10px;
    padding: 18px;
    min-height: 56px;
    align-items: center;
    background: #fff;
    border-bottom: 1px solid #e0e0e0;
}

.nb-swatch {
    width: 28px;
    height: 28px;
    border: 3px solid #ddd;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border-radius: 50%;
    position: relative;
    overflow: hidden;
}

.swatch-ripple {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    background: rgba(255,255,255,0.5);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    transition: all 0.3s ease;
}

.nb-swatch:hover .swatch-ripple {
    width: 40px;
    height: 40px;
}

.nb-swatch:hover {
    transform: scale(1.15);
    border-color: #000;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
}

.nb-swatch.active {
    border-color: #000;
    border-width: 4px;
    transform: scale(1.1);
    box-shadow: 0 0 0 2px rgba(0,0,0,0.1);
}

.nb-info {
    padding: 24px;
    background: #fff;
    flex: 1 1 auto;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.nb-title-row {
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
    margin-bottom: 10px;
}

.nb-title {
    font-size: 1.25rem;
    font-weight: 700;
    color: #000;
    line-height: 1.3;
    flex: 1;
    margin-right: 12px;
    text-decoration: none;
    transition: all 0.3s ease;
    position: relative;
}

.hover-underline::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 2px;
    background: #000;
    transition: width 0.3s ease;
}

.hover-underline:hover::after {
    width: 100%;
}

.nb-title:hover {
    color: #333;
    text-decoration: none;
}

.favorite-btn {
    color: #000;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    padding: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    position: relative;
}

.heart-animation {
    transition: all 0.3s ease;
}

.favorite-btn:hover .heart-animation {
    animation: heartBeat 0.6s ease-in-out;
}

@keyframes heartBeat {
    0%, 100% { transform: scale(1); }
    25% { transform: scale(1.1); }
    50% { transform: scale(1.2); }
    75% { transform: scale(1.1); }
}

.favorite-btn:hover {
    background: rgba(0,0,0,0.05);
    transform: scale(1.1);
}

.favorite-btn.favorited .heart-animation svg {
    fill: #ff0000;
    stroke: #ff0000;
    animation: favoriteAdded 0.5s ease-out;
}

@keyframes favoriteAdded {
    0% { transform: scale(1); }
    50% { transform: scale(1.3); }
    100% { transform: scale(1); }
}

.nb-category {
    font-size: 0.9rem;
    color: #666;
    margin-bottom: 14px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.8px;
}

.rating-section {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 18px;
}

.stars {
    display: flex;
    gap: 3px;
}

.star {
    color: #ddd;
    font-size: 16px;
    transition: all 0.2s ease;
    animation: starFadeIn 0.5s ease-out;
}

@keyframes starFadeIn {
    from { opacity: 0; transform: scale(0.5); }
    to { opacity: 1; transform: scale(1); }
}

.star.filled {
    color: #000;
    text-shadow: 0 0 4px rgba(0,0,0,0.3);
}

.rating-count {
    font-size: 0.85rem;
    color: #666;
    font-weight: 500;
}

.nb-bottom-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-top: 2px solid #000;
    margin-top: 18px;
    padding-top: 18px;
}

.nb-price {
    color: #000;
    font-weight: 800;
    font-size: 1.4rem;
    letter-spacing: 0.5px;
    position: relative;
}

.price-counter {
    animation: priceGlow 2s ease-in-out infinite;
}

@keyframes priceGlow {
    0%, 100% { text-shadow: none; }
    50% { text-shadow: 0 0 8px rgba(0,0,0,0.3); }
}

.add-to-cart-form {
    display: flex;
    align-items: center;
}

.modern-cart-btn {
    background: #000;
    color: #fff;
    border: 2px solid #000;
    padding: 10px 18px;
    font-weight: 700;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    border-radius: 25px;
    position: relative;
    overflow: hidden;
    min-width: 80px;
}

.btn-content {
    display: flex;
    align-items: center;
    gap: 6px;
    transition: all 0.3s ease;
}

.btn-loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    opacity: 0;
    transition: opacity 0.3s ease;
}

.loading-spinner {
    width: 16px;
    height: 16px;
    border: 2px solid transparent;
    border-top: 2px solid #fff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.modern-cart-btn.loading .btn-content {
    opacity: 0;
}

.modern-cart-btn.loading .btn-loading {
    opacity: 1;
}

.modern-cart-btn:hover {
    background: #fff;
    color: #000;
    border-color: #000;
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0,0,0,0.2);
}

/* Animations */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Pagination */
.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 12px;
    margin-top: 4rem;
    padding: 2rem 0;
}

.pagination .btn {
    padding: 12px 20px;
    border: 2px solid #000;
    background: #fff;
    color: #000;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
    min-width: 48px;
    text-align: center;
}

.pagination .btn:hover {
    background: #000;
    color: #fff;
}

.pagination .btn.active {
    background: #000;
    color: #fff;
}

/* Responsive Design */
@media (max-width: 900px) {
    .products-grid {
        grid-template-columns: 1fr;
        gap: 1.5rem;
        padding: 0;
    }
    
    .product-card {
        min-height: auto;
    }
    
    .nb-image-section {
        aspect-ratio: 1.5/1;
        min-height: 200px;
    }
    
    .nb-image {
        max-height: 180px;
    }
}

@media (max-width: 768px) {
    .products-page {
        flex-direction: column;
        padding: 0 1rem;
    }
    
    .sidebar {
        width: 100%;
        margin-bottom: 2rem;
    }
    
    .hero-title {
        font-size: 2.5rem;
    }
    
    .hero-description {
        font-size: 16px;
    }
    
    .hero-cta {
        padding: 14px 28px;
        font-size: 15px;
    }
    
    .banner-content {
        flex-direction: column;
        gap: 12px;
    }
    
    .banner-text {
        font-size: 14px;
    }
}

@media (max-width: 480px) {
    .hero-title {
        font-size: 2rem;
    }
    
    .collection-hero {
        padding: 60px 20px;
    }
    
    .products-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
}

/* Filter Styles */
.filter-section {
    margin-bottom: 2.5rem;
}

.filter-title {
    font-size: 0.9rem;
    font-weight: 700;
    letter-spacing: 1px;
    color: #000;
    margin-bottom: 1.2rem;
    text-transform: uppercase;
    border-bottom: 2px solid #000;
    padding-bottom: 8px;
}

#model-filter-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.filter-checkbox {
    display: flex;
    align-items: center;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 500;
    color: #000;
    user-select: none;
    position: relative;
}

.filter-checkbox input[type="checkbox"] {
    appearance: none;
    width: 20px;
    height: 20px;
    border: 2px solid #000;
    margin-right: 12px;
    background: #fff;
    outline: none;
    transition: all 0.2s ease;
    position: relative;
}

.filter-checkbox input[type="checkbox"]:checked {
    background: #000;
    border-color: #000;
}

.filter-checkbox input[type="checkbox"]:checked + .checkmark:after {
    display: block;
}

.checkmark {
    position: absolute;
    left: 0;
    top: 0;
    height: 20px;
    width: 20px;
    pointer-events: none;
}

.filter-checkbox .checkmark:after {
    content: "";
    position: absolute;
    display: none;
    left: 6px;
    top: 2px;
    width: 5px;
    height: 10px;
    border: solid #fff;
    border-width: 0 2px 2px 0;
    transform: rotate(45deg);
}

.filter-label {
    margin-left: 32px;
    font-size: 1rem;
    color: #000;
    font-weight: 500;
}

.sidebar-sort-filter {
    margin-top: 1rem;
}

.sidebar-sort-filter select {
    width: 100%;
    padding: 10px;
    border: 2px solid #000;
    background: #fff;
    color: #000;
    font-size: 1rem;
    font-weight: 500;
    outline: none;
    transition: all 0.2s ease;
}

.sidebar-sort-filter select:focus {
    background: #f8f8f8;
}

/* Size Guide Sidebar Styles */
.size-guide-sidebar {
    padding: 20px;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border: 2px solid #000;
    border-radius: 8px;
    text-align: center;
}

.size-guide-link {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    color: #000;
    text-decoration: none;
    font-weight: 700;
    font-size: 16px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    transition: all 0.3s ease;
    padding: 12px 16px;
    border: 2px solid transparent;
    border-radius: 6px;
    background: #fff;
    margin-bottom: 8px;
}

.size-guide-link:hover {
    background: #000;
    color: #fff;
    border-color: #000;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
}

.size-guide-icon {
    transition: transform 0.3s ease;
}

.size-guide-link:hover .size-guide-icon {
    transform: scale(1.1);
}

.size-guide-text {
    font-size: 12px;
    color: #666;
    margin: 0;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}
</style>

<!-- AOS Library for Scroll Animations -->
<link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
<script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>

<script>
// Get CSRF token from meta tag (global scope)
const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');

// Debug: Log CSRF token
console.log('CSRF Token:', csrfToken);

document.addEventListener('DOMContentLoaded', function() {
    
    // Initialize AOS with enhanced settings
    AOS.init({
        duration: 800,
        easing: 'ease-out-cubic',
        once: true,
        offset: 50,
        delay: 100
    });

    const form = document.getElementById('model-filter-form');
    const checkboxes = form.querySelectorAll('input[type="checkbox"]');

    // Enhanced product card interactions with staggered animations
    const productCards = document.querySelectorAll('.product-card');
    productCards.forEach((card, index) => {
        // Staggered entrance animation
        card.style.animationDelay = `${index * 0.1}s`;
        
        // Enhanced hover effects
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-8px) scale(1.02)';
            this.style.boxShadow = '0 20px 40px rgba(0,0,0,0.2)';
            
            // Animate image
            const image = this.querySelector('.nb-image');
            if (image) {
                image.style.transform = 'scale(1.1) rotate(2deg)';
            }
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
            this.style.boxShadow = '0 4px 20px rgba(0,0,0,0.1)';
            
            // Reset image
            const image = this.querySelector('.nb-image');
            if (image) {
                image.style.transform = 'scale(1) rotate(0deg)';
            }
        });
    });

    // Enhanced favorite button functionality
    const favoriteButtons = document.querySelectorAll('.favorite-btn');
    favoriteButtons.forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            this.classList.toggle('favorited');
            const productId = this.dataset.productId;
            
            // Add to favorites with animation
            if (this.classList.contains('favorited')) {
                // Save to localStorage
                let favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
                if (!favorites.includes(productId)) {
                    favorites.push(productId);
                    localStorage.setItem('favorites', JSON.stringify(favorites));
                }
                
                // Show notification
                showNotification('Added to favorites! ❤️', 'success');
            } else {
                // Remove from favorites
                let favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
                favorites = favorites.filter(id => id !== productId);
                localStorage.setItem('favorites', JSON.stringify(favorites));
                
                showNotification('Removed from favorites', 'info');
            }
        });
    });

    // Load saved favorites
    const savedFavorites = JSON.parse(localStorage.getItem('favorites') || '[]');
    favoriteButtons.forEach(btn => {
        const productId = btn.dataset.productId;
        if (savedFavorites.includes(productId)) {
            btn.classList.add('favorited');
        }
    });

    // Enhanced swatch interactions with image switching
    const swatches = document.querySelectorAll('.nb-swatch');
    swatches.forEach(swatch => {
        swatch.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            // Remove active class from siblings
            const siblings = this.parentElement.querySelectorAll('.nb-swatch');
            siblings.forEach(s => s.classList.remove('active'));
            
            // Add active class to clicked swatch
            this.classList.add('active');
            
            // Switch product image if data-image exists
            const newImage = this.dataset.image;
            if (newImage) {
                const productCard = this.closest('.product-card');
                const productImage = productCard.querySelector('.nb-image');
                
                if (productImage && productImage.src !== newImage) {
                    // Fade out, change src, fade in
                    productImage.style.opacity = '0.5';
                    productImage.style.transform = 'scale(0.95)';
                    
                    setTimeout(() => {
                        productImage.src = newImage;
                        productImage.style.opacity = '1';
                        productImage.style.transform = 'scale(1)';
                    }, 200);
                }
            }
        });
    });

    // Price counter animation
    const priceCounters = document.querySelectorAll('.price-counter');
    priceCounters.forEach(counter => {
        const price = parseInt(counter.dataset.price);
        animatePrice(counter, 0, price, 1000);
    });

    // Handle checkbox changes
    checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            const checkedCategories = Array.from(checkboxes)
                .filter(cb => cb.checked)
                .map(cb => cb.value);
            
            const url = new URL(window.location.href);
            const params = url.searchParams;
            
            if (checkedCategories.length > 0) {
                params.set('category', checkedCategories.join(','));
            } else {
                params.delete('category');
            }
            
            const currentSort = params.get('sort');
            if (currentSort) {
                params.set('sort', currentSort);
            }
            
            params.delete('page');
            window.location.href = url.pathname + '?' + params.toString();
        });
    });

    // Initialize checkboxes from URL parameters
    const url = new URL(window.location.href);
    const categoryParam = url.searchParams.get('category');
    if (categoryParam) {
        const selectedCategories = categoryParam.split(',');
        checkboxes.forEach(checkbox => {
            checkbox.checked = selectedCategories.includes(checkbox.value);
        });
    }

    // Smooth scroll for CTAs
    const bannerCTA = document.querySelector('.banner-cta');
    const heroCTA = document.querySelector('.hero-cta');
    
    [bannerCTA, heroCTA].forEach(cta => {
        if (cta) {
            cta.addEventListener('click', function(e) {
                e.preventDefault();
                const target = document.querySelector('#products-grid');
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        }
    });
});

// Enhanced utility functions
function animatePrice(element, start, end, duration) {
    const startTime = performance.now();
    const range = end - start;
    
    function updatePrice(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // Easing function for smooth animation
        const easeOutCubic = 1 - Math.pow(1 - progress, 3);
        const currentValue = Math.floor(start + (range * easeOutCubic));
        
        element.textContent = `${currentValue.toLocaleString()}`;
        
        if (progress < 1) {
            requestAnimationFrame(updatePrice);
        } else {
            element.textContent = `${end.toLocaleString()}`;
        }
    }
    
    requestAnimationFrame(updatePrice);
}

// Enhanced Add to Cart Functions
function addToCart(event, productId) {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    
    // Show loading state with enhanced animation
    const button = form.querySelector('.modern-cart-btn');
    button.classList.add('loading');
    button.disabled = true;
    
    // Add cart animation
    const productCard = form.closest('.product-card');
    const productImage = productCard.querySelector('.nb-image');
    
    // Create flying cart animation
    if (productImage) {
        createFlyingCartAnimation(productImage, productCard);
    }
    
    // Add CSRF token to form data
    if (csrfToken) {
        formData.append('_csrf', csrfToken);
    }
    
    fetch(`/cart/add/${productId}`, {
        method: 'POST',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-Requested-With': 'XMLHttpRequest'
        },
        body: new URLSearchParams(formData),
        credentials: 'same-origin'
    })
    .then(response => {
        console.log('Response status:', response.status);
        console.log('Response headers:', response.headers);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        console.log('Response data:', data);
        
        if (data.success) {
            // Show success message with enhanced styling
            showNotification('🛒 Product added to cart!', 'success');
            
            // Add success animation to card
            productCard.style.animation = 'successPulse 0.6s ease-out';
            setTimeout(() => {
                productCard.style.animation = '';
            }, 600);
            
            // Update cart count if header has cart counter
            updateCartCount(data.cartCount);
            // Dispatch cart-updated event after successful add to cart
            window.dispatchEvent(new CustomEvent('cart-updated'));
        } else {
            throw new Error(data.error || 'Failed to add to cart');
        }
    })
    .catch(error => {
        console.error('Detailed error:', error);
        console.error('Error message:', error.message);
        
        let errorMessage = '❌ Failed to add to cart. Please try again.';
        if (error.message.includes('403')) {
            errorMessage = '❌ Security error. Please refresh the page and try again.';
        }
        
        showNotification(errorMessage, 'error');
        
        // Add error shake animation
        productCard.style.animation = 'errorShake 0.5s ease-out';
        setTimeout(() => {
            productCard.style.animation = '';
        }, 500);
    })
    .finally(() => {
        // Reset button with delay for better UX
        setTimeout(() => {
            button.classList.remove('loading');
            button.disabled = false;
        }, 800);
    });
}

function quickAddToCart(productId) {
    // Enhanced quick add with visual feedback
    const formData = new FormData();
    formData.append('color', 'Black');
    formData.append('size', 'M');
    
    // Add CSRF token
    if (csrfToken) {
        formData.append('_csrf', csrfToken);
    }
    
    // Find the product card for animations
    const productCard = document.querySelector(`[data-product-id="${productId}"]`);
    const quickAddBtn = productCard.querySelector('.quick-add-btn');
    
    // Show loading state
    quickAddBtn.innerHTML = '<div class="loading-spinner"></div><span>Adding...</span>';
    quickAddBtn.disabled = true;
    
    fetch(`/cart/add/${productId}`, {
        method: 'POST',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-Requested-With': 'XMLHttpRequest'
        },
        body: new URLSearchParams(formData),
        credentials: 'same-origin'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification('🛒 Product added to cart!', 'success');
            
            // Success animation
            productCard.style.animation = 'successPulse 0.6s ease-out';
            quickAddBtn.innerHTML = '✓ Added!';
            
            // Update cart count
            updateCartCount(data.cartCount);
            window.dispatchEvent(new CustomEvent('cart-updated'));
            
            setTimeout(() => {
                productCard.style.animation = '';
                quickAddBtn.innerHTML = '<span>Quick Add</span>';
                quickAddBtn.disabled = false;
            }, 1500);
        } else {
            throw new Error(data.error || 'Failed to add to cart');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showNotification('❌ Failed to add to cart. Please try again.', 'error');
        
        quickAddBtn.innerHTML = '<span>Quick Add</span>';
        quickAddBtn.disabled = false;
    });
}

function updateCartCount(count) {
    // Update cart count in header if it exists
    const cartCounters = document.querySelectorAll('.cart-count, .cart-counter, [data-cart-count]');
    cartCounters.forEach(counter => {
        counter.textContent = count || 0;
        if (count > 0) {
            counter.style.display = 'inline-block';
        }
    });
}

function quickView(productId) {
    // Find the product data
    const productCard = document.querySelector(`[data-product-id="${productId}"]`);
    const productName = productCard.querySelector('.nb-title').textContent;
    const productImage = productCard.querySelector('.nb-image').src;
    const productPrice = productCard.querySelector('.nb-price').textContent;
    const productCategory = productCard.querySelector('.nb-category').textContent;
    
    // Create modal
    const modal = document.createElement('div');
    modal.className = 'quick-view-modal';
    modal.innerHTML = `
        <div class="modal-overlay" onclick="closeQuickView()"></div>
        <div class="modal-content">
            <button class="modal-close" onclick="closeQuickView()">×</button>
            <div class="modal-body">
                <div class="modal-image-section">
                    <img src="${productImage}" alt="${productName}" class="modal-image">
                </div>
                <div class="modal-info">
                    <div class="modal-category">${productCategory}</div>
                    <h2 class="modal-title">${productName}</h2>
                    <div class="modal-price">${productPrice}</div>
                    <div class="modal-rating">
                        <div class="stars">
                            <span class="star filled">★</span>
                            <span class="star filled">★</span>
                            <span class="star filled">★</span>
                            <span class="star filled">★</span>
                            <span class="star">★</span>
                        </div>
                        <span class="rating-count">(127 reviews)</span>
                    </div>
                    <div class="modal-description">
                        <p>Premium quality product designed for excellence and durability. Features modern design with superior materials and craftsmanship.</p>
                    </div>
                    <div class="modal-options">
                        <div class="option-group">
                            <label>Color:</label>
                            <div class="color-options">
                                <div class="color-option active" style="background: #000" data-color="Black"></div>
                                <div class="color-option" style="background: #fff; border: 2px solid #ddd" data-color="White"></div>
                                <div class="color-option" style="background: #666" data-color="Gray"></div>
                            </div>
                        </div>
                        <div class="option-group">
                            <label>Size:</label>
                            <div class="size-options">
                                <div class="size-option" data-size="S">S</div>
                                <div class="size-option active" data-size="M">M</div>
                                <div class="size-option" data-size="L">L</div>
                                <div class="size-option" data-size="XL">XL</div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-actions">
                        <button class="modal-add-to-cart" onclick="addToCartFromModal('${productId}')">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <circle cx="9" cy="21" r="1"></circle>
                                <circle cx="20" cy="21" r="1"></circle>
                                <path d="m1 1 4 4 2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
                            </svg>
                            Add to Cart
                        </button>
                        <button class="modal-view-details" onclick="window.location.href='/products/${productId}'">
                            View Full Details
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Add modal styles
    const modalStyles = `
        .quick-view-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 10000;
            display: flex;
            align-items: center;
            justify-content: center;
            animation: modalFadeIn 0.3s ease-out;
        }
        
        .modal-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            backdrop-filter: blur(5px);
        }
        
        .modal-content {
            position: relative;
            background: #fff;
            border-radius: 12px;
            max-width: 800px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            animation: modalSlideIn 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .modal-close {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(0,0,0,0.1);
            border: none;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            font-size: 24px;
            cursor: pointer;
            z-index: 10;
            transition: all 0.3s ease;
        }
        
        .modal-close:hover {
            background: rgba(0,0,0,0.2);
            transform: scale(1.1);
        }
        
        .modal-body {
            display: flex;
            gap: 40px;
            padding: 40px;
        }
        
        .modal-image-section {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f8f9fa;
            border-radius: 8px;
            padding: 40px;
        }
        
        .modal-image {
            max-width: 100%;
            max-height: 400px;
            object-fit: contain;
        }
        
        .modal-info {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .modal-category {
            color: #666;
            font-size: 14px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .modal-title {
            font-size: 28px;
            font-weight: 800;
            color: #000;
            margin: 0;
        }
        
        .modal-price {
            font-size: 24px;
            font-weight: 800;
            color: #000;
        }
        
        .modal-rating {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .modal-description {
            color: #666;
            line-height: 1.6;
        }
        
        .option-group {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .option-group label {
            font-weight: 600;
            color: #000;
        }
        
        .color-options {
            display: flex;
            gap: 10px;
        }
        
        .color-option {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            border: 3px solid transparent;
            transition: all 0.3s ease;
        }
        
        .color-option.active {
            border-color: #000;
            transform: scale(1.1);
        }
        
        .size-options {
            display: flex;
            gap: 10px;
        }
        
        .size-option {
            padding: 10px 15px;
            border: 2px solid #ddd;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .size-option.active {
            border-color: #000;
            background: #000;
            color: #fff;
        }
        
        .modal-actions {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }
        
        .modal-add-to-cart {
            flex: 1;
            background: #000;
            color: #fff;
            border: 2px solid #000;
            padding: 15px 20px;
            border-radius: 8px;
            font-weight: 700;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            transition: all 0.3s ease;
        }
        
        .modal-add-to-cart:hover {
            background: #fff;
            color: #000;
        }
        
        .modal-view-details {
            background: transparent;
            color: #000;
            border: 2px solid #000;
            padding: 15px 20px;
            border-radius: 8px;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .modal-view-details:hover {
            background: #000;
            color: #fff;
        }
        
        @keyframes modalFadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes modalSlideIn {
            from { transform: scale(0.8) translateY(50px); opacity: 0; }
            to { transform: scale(1) translateY(0); opacity: 1; }
        }
        
        @keyframes successPulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
        
        @keyframes errorShake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }
        
        @keyframes quickViewPulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.02); }
        }
        
        @media (max-width: 768px) {
            .modal-body {
                flex-direction: column;
                gap: 20px;
                padding: 20px;
            }
            
            .modal-actions {
                flex-direction: column;
            }
        }
    `;
    
    // Add styles if not already added
    if (!document.querySelector('#quick-view-styles')) {
        const style = document.createElement('style');
        style.id = 'quick-view-styles';
        style.textContent = modalStyles;
        document.head.appendChild(style);
    }
    
    document.body.appendChild(modal);
    document.body.style.overflow = 'hidden';
    
    // Add event listeners for options
    modal.querySelectorAll('.color-option').forEach(option => {
        option.addEventListener('click', function() {
            modal.querySelectorAll('.color-option').forEach(o => o.classList.remove('active'));
            this.classList.add('active');
        });
    });
    
    modal.querySelectorAll('.size-option').forEach(option => {
        option.addEventListener('click', function() {
            modal.querySelectorAll('.size-option').forEach(o => o.classList.remove('active'));
            this.classList.add('active');
        });
    });
}

function closeQuickView() {
    const modal = document.querySelector('.quick-view-modal');
    if (modal) {
        modal.style.animation = 'modalFadeIn 0.3s ease-out reverse';
        setTimeout(() => {
            modal.remove();
            document.body.style.overflow = '';
        }, 300);
    }
}

function addToCartFromModal(productId) {
    const modal = document.querySelector('.quick-view-modal');
    const selectedColor = modal.querySelector('.color-option.active').dataset.color;
    const selectedSize = modal.querySelector('.size-option.active').dataset.size;
    const button = modal.querySelector('.modal-add-to-cart');
    
    // Show loading state
    button.innerHTML = '<div class="loading-spinner"></div> Adding...';
    button.disabled = true;
    
    const formData = new FormData();
    formData.append('color', selectedColor);
    formData.append('size', selectedSize);
    
    // Add CSRF token
    if (csrfToken) {
        formData.append('_csrf', csrfToken);
    }
    
    fetch(`/cart/add/${productId}`, {
        method: 'POST',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-Requested-With': 'XMLHttpRequest'
        },
        body: new URLSearchParams(formData),
        credentials: 'same-origin'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification('🛒 Product added to cart!', 'success');
            updateCartCount(data.cartCount);
            closeQuickView();
        } else {
            throw new Error(data.error || 'Failed to add to cart');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showNotification('❌ Failed to add to cart. Please try again.', 'error');
        
        // Reset button
        button.innerHTML = '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="9" cy="21" r="1"></circle><circle cx="20" cy="21" r="1"></circle><path d="m1 1 4 4 2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path></svg>Add to Cart';
        button.disabled = false;
    });
}

function createFlyingCartAnimation(sourceElement, productCard) {
    // Create a clone of the product image for the flying animation
    const clone = sourceElement.cloneNode(true);
    const sourceRect = sourceElement.getBoundingClientRect();
    
    // Style the clone for animation
    clone.style.position = 'fixed';
    clone.style.top = sourceRect.top + 'px';
    clone.style.left = sourceRect.left + 'px';
    clone.style.width = sourceRect.width + 'px';
    clone.style.height = sourceRect.height + 'px';
    clone.style.zIndex = '10000';
    clone.style.pointerEvents = 'none';
    clone.style.transition = 'all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
    
    document.body.appendChild(clone);
    
    // Animate to cart position (top right corner)
    setTimeout(() => {
        clone.style.top = '20px';
        clone.style.right = '20px';
        clone.style.left = 'auto';
        clone.style.width = '40px';
        clone.style.height = '40px';
        clone.style.opacity = '0';
        clone.style.transform = 'scale(0.1) rotate(360deg)';
    }, 50);
    
    // Remove clone after animation
    setTimeout(() => {
        document.body.removeChild(clone);
    }, 900);
}

function showNotification(message, type) {
    // Create enhanced notification element
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    
    // Enhanced notification content with icons
    const icons = {
        success: '✅',
        error: '❌',
        info: 'ℹ️'
    };
    
    notification.innerHTML = `
        <div class="notification-content">
            <div class="notification-icon">${icons[type] || '📢'}</div>
            <span class="notification-message">${message}</span>
            <button class="notification-close" onclick="this.parentElement.parentElement.remove()">×</button>
        </div>
        <div class="notification-progress"></div>
    `;
    
    // Enhanced styles with gradients and animations
    const colors = {
        success: 'linear-gradient(135deg, #000 0%, #333 100%)',
        error: 'linear-gradient(135deg, #ff4757 0%, #ff3838 100%)',
        info: 'linear-gradient(135deg, #3742fa 0%, #2f3542 100%)'
    };
    
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${colors[type] || colors.info};
        color: white;
        padding: 0;
        border-radius: 12px;
        z-index: 10000;
        font-weight: 600;
        box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        animation: slideInRight 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        overflow: hidden;
        min-width: 300px;
        backdrop-filter: blur(10px);
    `;
    
    const content = notification.querySelector('.notification-content');
    content.style.cssText = `
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 16px 20px;
        position: relative;
    `;
    
    const icon = notification.querySelector('.notification-icon');
    icon.style.cssText = `
        font-size: 20px;
        animation: iconBounce 0.6s ease-out;
    `;
    
    const message_el = notification.querySelector('.notification-message');
    message_el.style.cssText = `
        flex: 1;
        font-size: 14px;
        line-height: 1.4;
    `;
    
    const button = notification.querySelector('.notification-close');
    button.style.cssText = `
        background: rgba(255,255,255,0.2);
        border: none;
        color: white;
        font-size: 18px;
        cursor: pointer;
        padding: 4px 8px;
        border-radius: 50%;
        width: 28px;
        height: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        font-weight: bold;
    `;
    
    button.addEventListener('mouseenter', () => {
        button.style.background = 'rgba(255,255,255,0.3)';
        button.style.transform = 'scale(1.1)';
    });
    
    button.addEventListener('mouseleave', () => {
        button.style.background = 'rgba(255,255,255,0.2)';
        button.style.transform = 'scale(1)';
    });
    
    const progress = notification.querySelector('.notification-progress');
    progress.style.cssText = `
        position: absolute;
        bottom: 0;
        left: 0;
        height: 3px;
        background: rgba(255,255,255,0.3);
        animation: progressBar 4s linear;
        transform-origin: left;
    `;
    
    // Add enhanced animation styles
    if (!document.querySelector('#notification-styles')) {
        const style = document.createElement('style');
        style.id = 'notification-styles';
        style.textContent = `
            @keyframes slideInRight {
                from { 
                    transform: translateX(100%) scale(0.8); 
                    opacity: 0; 
                }
                to { 
                    transform: translateX(0) scale(1); 
                    opacity: 1; 
                }
            }
            
            @keyframes iconBounce {
                0%, 100% { transform: scale(1); }
                25% { transform: scale(1.2); }
                50% { transform: scale(0.9); }
                75% { transform: scale(1.1); }
            }
            
            @keyframes progressBar {
                from { transform: scaleX(1); }
                to { transform: scaleX(0); }
            }
            
            @keyframes successPulse {
                0%, 100% { transform: scale(1); }
                50% { transform: scale(1.05); }
            }
            
            @keyframes errorShake {
                0%, 100% { transform: translateX(0); }
                25% { transform: translateX(-5px); }
                75% { transform: translateX(5px); }
            }
            
            @keyframes quickViewPulse {
                0%, 100% { transform: scale(1); }
                50% { transform: scale(1.02); }
            }
        `;
        document.head.appendChild(style);
    }
    
    document.body.appendChild(notification);
    
    // Auto remove after 4 seconds with fade out
    setTimeout(() => {
        if (notification.parentElement) {
            notification.style.animation = 'slideInRight 0.3s ease-out reverse';
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 300);
        }
    }, 4000);
}
</script>

<%- include('partials/footer') %>