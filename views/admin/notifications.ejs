<%- include('../partials/admin-header') %>

<div class="container-fluid mt-4">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-3">
            <div class="card shadow-sm">
                <div class="card-header bg-gradient-primary text-white">
                    <h6 class="mb-0"><i class="fas fa-bell me-2"></i>Notification Center</h6>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush">
                        <a href="#" class="list-group-item list-group-item-action active" onclick="filterByType('')">
                            <i class="fas fa-list me-2"></i>All Notifications
                            <span class="badge bg-primary rounded-pill float-end" id="totalCount">0</span>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action" onclick="filterByType('order')">
                            <i class="fas fa-shopping-cart me-2 text-success"></i>Orders
                            <span class="badge bg-success rounded-pill float-end" id="orderCount">0</span>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action" onclick="filterByType('user')">
                            <i class="fas fa-user-plus me-2 text-primary"></i>Users
                            <span class="badge bg-primary rounded-pill float-end" id="userCount">0</span>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action" onclick="filterByType('message')">
                            <i class="fas fa-envelope me-2 text-warning"></i>Messages
                            <span class="badge bg-warning rounded-pill float-end" id="messageCount">0</span>
                        </a>
                        <a href="#" class="list-group-item list-group-item-action" onclick="filterByType('system')">
                            <i class="fas fa-cog me-2 text-secondary"></i>System
                            <span class="badge bg-secondary rounded-pill float-end" id="systemCount">0</span>
                        </a>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="card shadow-sm mt-3">
                <div class="card-header bg-light">
                    <h6 class="mb-0"><i class="fas fa-bolt me-2"></i>Quick Actions</h6>
                </div>
                <div class="card-body">
                    <button class="btn btn-outline-primary btn-sm w-100 mb-2" onclick="markAllAsRead()">
                        <i class="fas fa-check-double me-1"></i>Mark All Read
                    </button>
                    <button class="btn btn-primary btn-sm w-100" data-bs-toggle="modal" data-bs-target="#createModal">
                        <i class="fas fa-plus me-1"></i>New Notification
                    </button>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="col-md-9">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h3 class="mb-1">Notifications</h3>
                    <p class="text-muted mb-0">Manage your system notifications</p>
                </div>
                <div class="d-flex gap-2">
                    <select class="form-select form-select-sm" id="statusFilter" onchange="applyFilters()">
                        <option value="">All Status</option>
                        <option value="unread">Unread Only</option>
                        <option value="read">Read Only</option>
                    </select>
                    <select class="form-select form-select-sm" id="priorityFilter" onchange="applyFilters()">
                        <option value="">All Priorities</option>
                        <option value="high">High Priority</option>
                        <option value="medium">Medium Priority</option>
                        <option value="low">Low Priority</option>
                    </select>
                </div>
            </div>

            <!-- Search Bar -->
            <div class="card shadow-sm mb-4">
                <div class="card-body py-3">
                    <div class="input-group">
                        <span class="input-group-text bg-light border-end-0">
                            <i class="fas fa-search text-muted"></i>
                        </span>
                        <input type="text" class="form-control border-start-0" id="searchInput" 
                               placeholder="Search notifications..." onkeyup="applyFilters()">
                        <button class="btn btn-outline-secondary" onclick="clearSearch()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Notifications List -->
            <div id="notificationsList" class="notifications-container">
                <!-- Notifications will be loaded here -->
            </div>

            <!-- Pagination -->
            <nav class="mt-4" id="paginationContainer" style="display: none;">
                <ul class="pagination justify-content-center" id="paginationControls">
                </ul>
            </nav>
        </div>
    </div>
</div>

<!-- Create Notification Modal -->
<div class="modal fade" id="createModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title"><i class="fas fa-plus me-2"></i>Create New Notification</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form id="createForm">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label class="form-label fw-bold">Title *</label>
                                <input type="text" class="form-control" id="title" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Message *</label>
                                <textarea class="form-control" id="message" rows="4" required></textarea>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Link (Optional)</label>
                                <input type="text" class="form-control" id="link" placeholder="/admin/...">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label fw-bold">Type</label>
                                <select class="form-select" id="type">
                                    <option value="system">System</option>
                                    <option value="order">Order</option>
                                    <option value="user">User</option>
                                    <option value="message">Message</option>
                                    <option value="product">Product</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Priority</label>
                                <select class="form-select" id="priority">
                                    <option value="low">Low</option>
                                    <option value="medium">Medium</option>
                                    <option value="high">High</option>
                                </select>
                            </div>
                            <div class="alert alert-info">
                                <small><i class="fas fa-info-circle me-1"></i>High priority notifications will be highlighted</small>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-1"></i>Create Notification
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
.bg-gradient-primary {
    background: linear-gradient(45deg, #007bff, #0056b3);
}

.notifications-container {
    max-height: 70vh;
    overflow-y: auto;
}

.notification-card {
    transition: all 0.3s ease;
    border-left: 4px solid transparent;
}

.notification-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.notification-card.unread {
    background: linear-gradient(to right, #f8f9ff, #ffffff);
    border-left-color: #007bff;
}

.notification-card.priority-high {
    border-left-color: #dc3545;
}

.notification-card.priority-medium {
    border-left-color: #ffc107;
}

.notification-card.priority-low {
    border-left-color: #28a745;
}

.notification-icon {
    width: 45px;
    height: 45px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
}

.notification-icon.order { background: #e8f5e8; color: #28a745; }
.notification-icon.user { background: #e3f2fd; color: #007bff; }
.notification-icon.message { background: #fff3e0; color: #ff9800; }
.notification-icon.product { background: #f3e5f5; color: #9c27b0; }
.notification-icon.system { background: #f5f5f5; color: #6c757d; }

.time-badge {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
}

.empty-state {
    text-align: center;
    padding: 3rem 1rem;
    color: #6c757d;
}

.empty-state i {
    font-size: 4rem;
    margin-bottom: 1rem;
    opacity: 0.5;
}

.list-group-item.active {
    background-color: #007bff;
    border-color: #007bff;
}

.fade-in {
    animation: fadeIn 0.5s ease-in;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}
</style>

<script>
let notifications = [];
let filteredNotifications = [];
let currentFilter = '';
let currentPage = 1;
const itemsPerPage = 10;

document.addEventListener('DOMContentLoaded', function() {
    loadNotifications();
});

async function loadNotifications() {
    try {
        const response = await fetch('/admin/api/notifications?limit=100');
        if (response.ok) {
            const data = await response.json();
            notifications = data.notifications || [];
            updateCounts();
            applyFilters();
        } else {
            showEmptyState('Failed to load notifications');
        }
    } catch (error) {
        console.error('Error:', error);
        showEmptyState('Connection error');
    }
}

function updateCounts() {
    const counts = {
        total: notifications.length,
        order: notifications.filter(n => n.type === 'order').length,
        user: notifications.filter(n => n.type === 'user').length,
        message: notifications.filter(n => n.type === 'message').length,
        system: notifications.filter(n => n.type === 'system').length
    };

    document.getElementById('totalCount').textContent = counts.total;
    document.getElementById('orderCount').textContent = counts.order;
    document.getElementById('userCount').textContent = counts.user;
    document.getElementById('messageCount').textContent = counts.message;
    document.getElementById('systemCount').textContent = counts.system;
}

function filterByType(type) {
    currentFilter = type;
    currentPage = 1;
    
    // Update active sidebar item
    document.querySelectorAll('.list-group-item').forEach(item => {
        item.classList.remove('active');
    });
    event.target.classList.add('active');
    
    applyFilters();
}

function applyFilters() {
    const statusFilter = document.getElementById('statusFilter').value;
    const priorityFilter = document.getElementById('priorityFilter').value;
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();

    filteredNotifications = notifications.filter(notification => {
        const matchesType = !currentFilter || notification.type === currentFilter;
        const matchesStatus = !statusFilter || 
            (statusFilter === 'read' && notification.read) ||
            (statusFilter === 'unread' && !notification.read);
        const matchesPriority = !priorityFilter || notification.priority === priorityFilter;
        const matchesSearch = !searchTerm || 
            notification.title.toLowerCase().includes(searchTerm) ||
            notification.message.toLowerCase().includes(searchTerm);

        return matchesType && matchesStatus && matchesPriority && matchesSearch;
    });

    displayNotifications();
    updatePagination();
}

function displayNotifications() {
    const container = document.getElementById('notificationsList');
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const pageNotifications = filteredNotifications.slice(startIndex, endIndex);

    if (pageNotifications.length === 0) {
        showEmptyState();
        return;
    }

    container.innerHTML = pageNotifications.map(notification => `
        <div class="card notification-card mb-3 ${notification.read ? '' : 'unread'} priority-${notification.priority} fade-in">
            <div class="card-body">
                <div class="d-flex">
                    <div class="notification-icon ${notification.type} me-3">
                        <i class="fas ${getIcon(notification.type)}"></i>
                    </div>
                    <div class="flex-grow-1">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h6 class="mb-0 ${notification.read ? '' : 'fw-bold'}">${notification.title}</h6>
                            <div class="d-flex gap-1">
                                <span class="badge bg-${getPriorityColor(notification.priority)} time-badge">${notification.priority}</span>
                                <span class="badge bg-light text-dark time-badge">${formatTime(notification.createdAt)}</span>
                            </div>
                        </div>
                        <p class="text-muted mb-2">${notification.message}</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="badge bg-${getTypeColor(notification.type)}">${notification.type}</span>
                            <div class="btn-group btn-group-sm">
                                ${!notification.read ? `<button class="btn btn-outline-success" onclick="markAsRead('${notification._id}')">
                                    <i class="fas fa-check"></i> Mark Read
                                </button>` : ''}
                                ${notification.link ? `<a href="${notification.link}" class="btn btn-outline-primary">
                                    <i class="fas fa-external-link-alt"></i> View
                                </a>` : ''}
                                <button class="btn btn-outline-danger" onclick="deleteNotification('${notification._id}')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `).join('');
}

function showEmptyState(message = 'No notifications found') {
    document.getElementById('notificationsList').innerHTML = `
        <div class="empty-state">
            <i class="fas fa-bell-slash"></i>
            <h5>${message}</h5>
            <p class="text-muted">Try adjusting your filters or create a new notification</p>
        </div>
    `;
    document.getElementById('paginationContainer').style.display = 'none';
}

function updatePagination() {
    const totalPages = Math.ceil(filteredNotifications.length / itemsPerPage);
    const container = document.getElementById('paginationContainer');
    const controls = document.getElementById('paginationControls');
    
    if (totalPages <= 1) {
        container.style.display = 'none';
        return;
    }

    container.style.display = 'block';
    let html = '';
    
    for (let i = 1; i <= totalPages; i++) {
        html += `<li class="page-item ${i === currentPage ? 'active' : ''}">
            <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
        </li>`;
    }
    
    controls.innerHTML = html;
}

function changePage(page) {
    currentPage = page;
    displayNotifications();
    updatePagination();
}

function clearSearch() {
    document.getElementById('searchInput').value = '';
    applyFilters();
}

async function markAsRead(id) {
    try {
        const response = await fetch(`/admin/api/notifications/${id}/read`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
        });

        if (response.ok) {
            const notification = notifications.find(n => n._id === id);
            if (notification) notification.read = true;
            applyFilters();
            showToast('Notification marked as read', 'success');
        }
    } catch (error) {
        showToast('Failed to mark as read', 'error');
    }
}

async function markAllAsRead() {
    try {
        const response = await fetch('/admin/api/notifications/mark-all-read', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
        });

        if (response.ok) {
            notifications.forEach(n => n.read = true);
            applyFilters();
            showToast('All notifications marked as read', 'success');
        }
    } catch (error) {
        showToast('Failed to mark all as read', 'error');
    }
}

async function deleteNotification(id) {
    if (!confirm('Delete this notification?')) return;

    try {
        const response = await fetch(`/admin/api/notifications/${id}`, {
            method: 'DELETE',
            headers: {
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
        });

        if (response.ok) {
            notifications = notifications.filter(n => n._id !== id);
            updateCounts();
            applyFilters();
            showToast('Notification deleted', 'success');
        }
    } catch (error) {
        showToast('Failed to delete notification', 'error');
    }
}

document.getElementById('createForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = {
        title: document.getElementById('title').value,
        message: document.getElementById('message').value,
        type: document.getElementById('type').value,
        priority: document.getElementById('priority').value,
        link: document.getElementById('link').value || null
    };

    try {
        const response = await fetch('/admin/api/notifications', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify(formData)
        });

        if (response.ok) {
            const result = await response.json();
            notifications.unshift(result.notification);
            updateCounts();
            applyFilters();
            
            bootstrap.Modal.getInstance(document.getElementById('createModal')).hide();
            this.reset();
            showToast('Notification created successfully', 'success');
        }
    } catch (error) {
        showToast('Failed to create notification', 'error');
    }
});

function getIcon(type) {
    const icons = {
        order: 'fa-shopping-cart',
        user: 'fa-user-plus',
        message: 'fa-envelope',
        product: 'fa-box',
        system: 'fa-cog'
    };
    return icons[type] || 'fa-bell';
}

function getPriorityColor(priority) {
    const colors = { high: 'danger', medium: 'warning', low: 'success' };
    return colors[priority] || 'secondary';
}

function getTypeColor(type) {
    const colors = {
        order: 'success',
        user: 'primary', 
        message: 'warning',
        product: 'info',
        system: 'secondary'
    };
    return colors[type] || 'secondary';
}

function formatTime(timestamp) {
    const now = new Date();
    const time = new Date(timestamp);
    const diff = now - time;
    
    if (diff < 60000) return 'Just now';
    if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`;
    if (diff < 86400000) return `${Math.floor(diff / 3600000)}h ago`;
    return `${Math.floor(diff / 86400000)}d ago`;
}

function showToast(message, type) {
    // Simple toast notification
    const toast = document.createElement('div');
    toast.className = `alert alert-${type === 'success' ? 'success' : 'danger'} position-fixed`;
    toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    toast.innerHTML = `${message} <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>`;
    document.body.appendChild(toast);
    
    setTimeout(() => toast.remove(), 3000);
}
</script>

<%- include('../partials/admin-footer') %>