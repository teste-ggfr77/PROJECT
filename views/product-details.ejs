<%- include('partials/header') %>

<style>
body {
    background: #f8f6f3;
}
.product-detail {
    display: grid;
    grid-template-columns: 60% 40%;
    min-height: 100vh;
    max-width: 100vw;
    margin: 0;
    background: #f8f6f3;
}
.product-image {
    background: #f8f6f3;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    height: 100vh;
    position: relative;
    padding: 40px;
}
.product-image img {
    width: 100%;
    height: calc(100vh - 80px);
    object-fit: contain;
    display: block;
    margin: 0;
    max-width: none;
    max-height: none;
}
.image-navigation {
    position: absolute;
    right: 24px;
    bottom: 120px;
    display: flex;
    gap: 12px;
    z-index: 2;
}
.nav-btn {
    background: rgba(0, 0, 0, 0.15);
    color: #fff;
    border: none;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    cursor: pointer;
    font-size: 18px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s;
    padding: 0;
}
.nav-btn:hover {
    background: rgba(0, 0, 0, 0.25);
}
.image-counter {
    position: absolute;
    bottom: 24px;
    left: 24px;
    color: #b0a99f;
    font-size: 14px;
    font-weight: 400;
    opacity: 1;
}
.product-info {
    background: #fff;
    border-left: 1px solid #ececec;
    padding: 60px 48px 48px 48px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    min-height: 100vh;
    width: 100%;
    margin: 0;
}
.product-info h2 {
    font-size: 2.4rem;
    margin-bottom: 10px;
    font-weight: 700;
    color: #111;
    line-height: 1.1;
}
.product-rating {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 18px;
}
.rating-stars {
    color: #111;
    font-size: 18px;
}
.rating-count {
    color: #666;
    font-size: 15px;
}
.price {
    font-size: 1.6rem;
    margin-bottom: 2px;
    font-weight: 600;
    color: #111;
}
.taxes-info {
    color: #888;
    font-size: 13px;
    margin-bottom: 18px;
}
hr {
    border: none;
    border-top: 1px solid #ececec;
    margin: 24px 0 18px 0;
}
.variant-title {
    font-size: 15px;
    margin-bottom: 8px;
    font-weight: 600;
    color: #222;
}
.variant-images {
    display: flex;
    gap: 12px;
    margin-bottom: 18px;
}
.variant-image {
    width: 48px;
    height: 48px;
    border: 2px solid transparent;
    border-radius: 6px;
    cursor: pointer;
    padding: 2px;
    background: #f8f6f3;
    transition: border-color 0.2s;
}
.variant-image.selected {
    border-color: #111;
}
.size-selector {
    margin-bottom: 24px;
}
.size-title {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}
.size-title h3 {
    font-size: 15px;
    font-weight: 600;
    color: #222;
}
.size-guide {
    color: #111;
    text-decoration: underline;
    font-size: 13px;
}
.size-options {
    display: grid;
    grid-template-columns: repeat(6, 1fr);
    gap: 8px;
}
.size-button {
    background: #f8f6f3;
    border: 1px solid #e5e5e5;
    border-radius: 6px;
    padding: 12px 0;
    font-size: 15px;
    cursor: pointer;
    transition: all 0.2s;
    font-weight: 500;
}
.size-button:hover {
    border-color: #111;
}
.size-button.selected {
    background: #111;
    color: #fff;
    border-color: #111;
}
.add-to-cart {
    width: 100%;
    background: #b0a99f;
    color: #fff;
    padding: 18px;
    border: none;
    font-size: 16px;
    cursor: pointer;
    margin-bottom: 18px;
    border-radius: 30px;
    transition: background 0.2s;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-weight: 600;
}
.add-to-cart:not(:disabled) {
    background: #111;
    color: #fff;
}
.add-to-cart:disabled {
    background: #b0a99f;
    color: #fff;
    opacity: 1;
}
.shipping-info {
    color: #888;
    font-size: 13px;
    text-align: left;
    font-weight: 400;
    margin-top: 8px;
}
.related-products {
    padding: 60px 0;
    background: #fff;
    margin-top: 40px;
    border-top: 1px solid #f0f0f0;
}

.related-products .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

.related-title {
    font-size: 28px;
    font-weight: 600;
    text-align: center;
    margin-bottom: 40px;
    color: #111;
}

.related-products .products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 30px;
    margin: 0 auto;
}

.related-products .product-card {
    background: #fff;
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.3s ease;
    border: 1px solid #f0f0f0;
    height: 100%;
    display: flex;
    flex-direction: column;
}

.related-products .product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    border-color: #e0e0e0;
}

.related-products .nb-image-section {
    position: relative;
    padding-top: 100%;
    background: #f8f6f3;
    overflow: hidden;
}

.related-products .nb-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.related-products .product-card:hover .nb-image {
    transform: scale(1.05);
}

.related-products .nb-info {
    padding: 20px;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    background: #fff;
}

.related-products .nb-title-row {
    margin-bottom: 12px;
}

.related-products .nb-title {
    font-size: 16px;
    font-weight: 500;
    color: #111;
    margin: 0;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.related-products .nb-bottom-row {
    margin-top: auto;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding-top: 12px;
    border-top: 1px solid #f0f0f0;
}

.related-products .nb-price {
    font-size: 18px;
    font-weight: 600;
    color: #111;
}

.related-products .nb-badge {
    position: absolute;
    top: 12px;
    right: 12px;
    background: #111;
    color: #fff;
    padding: 6px 12px;
    border-radius: 4px;
    font-size: 14px;
    font-weight: 500;
    z-index: 1;
}

.product-link {
    text-decoration: none;
    color: inherit;
}

@media (max-width: 768px) {
    .product-detail {
        grid-template-columns: 1fr;
        min-height: auto;
    }

    .product-image {
        min-height: 60vh;
        height: 60vh;
        padding: 20px;
    }

    .product-image img {
        height: calc(60vh - 40px);
    }

    .product-info {
        min-height: auto;
        padding: 24px;
        border-left: none;
        border-top: 1px solid #ececec;
    }

    .product-info h2 {
        font-size: 1.8rem;
    }

    .size-options {
        grid-template-columns: repeat(3, 1fr);
        gap: 6px;
    }

    .size-button {
        padding: 10px 0;
        font-size: 14px;
    }

    .variant-images {
        gap: 8px;
    }

    .variant-image {
        width: 40px;
        height: 40px;
    }

    .add-to-cart {
        padding: 16px;
        font-size: 15px;
    }

    .image-navigation {
        bottom: 60px;
    }

    .nav-btn {
        width: 32px;
        height: 32px;
        font-size: 16px;
    }    .related-products {
        padding: 40px 0;
        margin-top: 20px;
    }

    .related-products .container {
        padding: 0 15px;
    }

    .related-title {
        font-size: 24px;
        margin-bottom: 30px;
    }

    .related-products .products-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
    }

    .related-products .nb-info {
        padding: 15px;
    }

    .related-products .nb-title {
        font-size: 14px;
        -webkit-line-clamp: 1;
        line-clamp: 1;
    }

    .related-products .nb-price {
        font-size: 16px;
    }
}

/* Size Guide Modal */
.modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    z-index: 1000;
}

.modal-backdrop.active {
    display: block;
}

.size-guide-modal {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: #fff;
    padding: 32px;
    border-radius: 12px;
    max-width: 600px;
    width: 90%;
    z-index: 1001;
    display: none;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
}

.size-guide-modal.active {
    display: block;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 24px;
}

.modal-title {
    font-size: 1.8rem;
    font-weight: 600;
    color: #111;
    margin: 0;
}

.modal-close {
    background: none;
    border: none;
    font-size: 24px;
    color: #888;
    cursor: pointer;
    padding: 4px;
    line-height: 1;
}

.modal-tabs {
    display: flex;
    gap: 16px;
    margin-bottom: 24px;
    border-bottom: 1px solid #ececec;
    padding-bottom: 16px;
}

.modal-tab {
    background: none;
    border: none;
    font-size: 15px;
    color: #888;
    cursor: pointer;
    padding: 8px 0;
    font-weight: 500;
    position: relative;
}

.modal-tab.active {
    color: #111;
}

.modal-tab.active::after {
    content: '';
    position: absolute;
    bottom: -17px;
    left: 0;
    width: 100%;
    height: 2px;
    background: #111;
}

.unit-toggle {
    display: flex;
    gap: 8px;
    margin-bottom: 24px;
}

.unit-btn {
    background: #f8f6f3;
    border: 1px solid #ececec;
    padding: 6px 16px;
    border-radius: 20px;
    font-size: 14px;
    cursor: pointer;
    color: #888;
}

.unit-btn.active {
    background: #111;
    color: #fff;
    border-color: #111;
}

.size-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 24px;
}

.size-table th,
.size-table td {
    padding: 12px;
    text-align: center;
    border: 1px solid #ececec;
}

.size-table th {
    background: #f8f6f3;
    font-weight: 600;
    color: #111;
}

.size-table td {
    color: #666;
}

.size-table tr:first-child th {
    background: #111;
    color: #fff;
}

.modal-pagination {
    display: flex;
    justify-content: center;
    gap: 12px;
    margin-top: 24px;
}

.page-btn {
    width: 36px;
    height: 36px;
    border: 1px solid #ececec;
    background: #fff;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: #111;
    transition: all 0.2s;
}

.page-btn:hover {
    background: #f8f6f3;
}

@media screen and (max-width: 768px) {
    .product-detail {
        grid-template-columns: 1fr;
        min-height: auto;
    }

    .product-image {
        min-height: 60vh;
        height: 60vh;
        padding: 20px;
    }

    .product-image img {
        height: calc(60vh - 40px);
    }

    .product-info {
        min-height: auto;
        padding: 24px;
        border-left: none;
        border-top: 1px solid #ececec;
    }

    .product-info h2 {
        font-size: 1.8rem;
    }

    .size-options {
        grid-template-columns: repeat(3, 1fr);
        gap: 6px;
    }

    .size-button {
        padding: 10px 0;
        font-size: 14px;
    }

    .variant-images {
        gap: 8px;
    }

    .variant-image {
        width: 40px;
        height: 40px;
    }

    .add-to-cart {
        padding: 16px;
        font-size: 15px;
    }

    .image-navigation {
        bottom: 60px;
    }

    .nav-btn {
        width: 32px;
        height: 32px;
        font-size: 16px;
    }    .related-products {
        padding: 40px 0;
        margin-top: 20px;
    }

    .related-products .container {
        padding: 0 15px;
    }

    .related-title {
        font-size: 24px;
        margin-bottom: 30px;
    }

    .related-products .products-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
    }

    .related-products .nb-info {
        padding: 15px;
    }

    .related-products .nb-title {
        font-size: 14px;
        -webkit-line-clamp: 1;
        line-clamp: 1;
    }

    .related-products .nb-price {
        font-size: 16px;
    }
}
</style>

<div class="product-detail">
    <div class="product-image">
        <% 
        const productImages = [];
        
        // Always start with the main product image
        productImages.push(product.image);
        
        // Add color variant images if they exist
        if (product.colorVariants && product.colorVariants.length > 0) {
            console.log('Product has colorVariants:', product.colorVariants.length);
            product.colorVariants.forEach(variant => {
                console.log('Processing variant:', variant.name, 'with', variant.images ? variant.images.length : 0, 'images');
                if (variant.images && variant.images.length > 0) {
                    variant.images.forEach(image => {
                        productImages.push(image);
                    });
                } else {
                    // If no images for this variant, use main image as fallback
                    productImages.push(product.image);
                }
            });
        } else if (product.colors && product.colors.length > 0) {
            // Fallback: generate images based on color names (old system)
            console.log('Using fallback color system for', product.colors.length, 'colors');
            product.colors.forEach(color => {
                productImages.push(`/uploads/${color.toLowerCase()}.jpg`);
            });
        }
        
        console.log('Total product images:', productImages.length);
        %>
        <img src="<%= productImages[0] %>" alt="<%= product.name %>" id="mainImage">
        <div class="image-navigation">
            <button class="nav-btn prev" id="prevButton">&lt;</button>
            <button class="nav-btn next" id="nextButton">&gt;</button>
        </div>
        <div class="image-counter" id="imageCounter">01/<%= productImages.length.toString().padStart(2, '0') %></div>
    </div>
    <div class="product-info">
        <h2><%= product.name %></h2>
        <div class="product-rating">
            <div class="rating-stars">★★★★★</div>
            <span class="rating-count">5,495</span>
        </div>
        <div class="price"><%= product.price.toLocaleString() %> dh</div>
        <div class="taxes-info"><%= __('products.product_details.taxes_included') %></div>
        <hr>
        <div class="product-variants">            <div class="variant-title"><%= __('products.product_details.color') %> <span id="selectedColorText" style="font-weight:700">
                <% if (product.colorVariants && product.colorVariants.length > 0) { %>
                    <%= product.colorVariants[0].name %>
                <% } else if (product.colors && product.colors.length > 0) { %>
                    <%= product.colors[0] %>
                <% } else { %>
                    Default
                <% } %>
            </span></div>
            <div class="variant-images">
                <% if (product.colorVariants && product.colorVariants.length > 0) { %>
                    <% product.colorVariants.forEach((variant, index) => { %>
                        <% 
                        // Use first image of variant, or main image as fallback
                        const variantImage = (variant.images && variant.images.length > 0) ? variant.images[0] : product.image;
                        const variantImagesJson = JSON.stringify(variant.images || [product.image]);
                        %>
                        <img src="<%= variantImage %>" 
                             alt="<%= variant.name %>" 
                             class="variant-image <%= index === 0 ? 'selected' : '' %>"
                             data-color="<%= variant.name %>"
                             data-images="<%= variantImagesJson.replace(/"/g, '&quot;') %>">
                    <% }) %>
                <% } else if (product.colors && product.colors.length > 0) { %>
                    <% product.colors.forEach((color, index) => { %>
                        <% 
                        // Fallback for old color system
                        const colorImage = `/uploads/${color.toLowerCase()}.jpg`;
                        %>
                        <img src="<%= colorImage %>" 
                             alt="<%= color %>" 
                             class="variant-image <%= index === 0 ? 'selected' : '' %>"
                             data-color="<%= color %>"
                             data-images="[\"<%= colorImage %>\"]">
                    <% }) %>
                <% } else { %>
                    <!-- No color variants available -->
                    <p class="text-muted">No color variants available</p>
                <% } %>
            </div>
        </div>
        <hr>
        <div class="size-selector">
            <div class="size-title">
                <h3><%= __('products.product_details.size') %> <span style="font-weight:400;font-size:13px;color:#888"><%= __('products.product_details.size_guide_note') %></span></h3>
                <a href="#" class="size-guide" id="sizeGuideLink"><%= __('products.product_details.size_guide') %></a>
            </div>
            <div class="size-options">
                <% if (product.sizes && product.sizes.length > 0) { %>
                    <% product.sizes.forEach(size => { %>
                        <button type="button" class="size-button" data-size="<%= size %>"><%= size %></button>
                    <% }) %>
                <% } else { %>
                    <p>No sizes available for this product.</p>
                <% } %>
            </div>
        </div>        <form action="/cart/add/<%= product._id %>" method="POST" id="addToCartForm">
            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
            <input type="hidden" name="color" id="selectedColor" value="<% if (product.colorVariants && product.colorVariants.length > 0) { %><%= product.colorVariants[0].name %><% } else if (product.colors && product.colors.length > 0) { %><%= product.colors[0] %><% } %>">
            <input type="hidden" name="size" id="selectedSize" value="">
            <button type="submit" class="add-to-cart" disabled><%= __('products.product_details.select_size') %></button>
        </form>
        <div class="shipping-info"><%= __('products.product_details.free_shipping') %></div>
    </div>
</div>

<div class="related-products">
    <div class="container">
        <h3 class="related-title"><%= __('products.product_details.you_may_like') %></h3>
        <div class="products-grid">
            <% relatedProducts.forEach(product => { %>
                <a href="/products/<%= product._id %>" class="product-link">
                    <div class="product-card">
                        <div class="nb-image-section">
                            <% if (product.price === 99) { %>
                                <div class="nb-badge"><%= __('products.product_details.now_price') %></div>
                            <% } %>
                            <img src="<%= product.image %>" alt="<%= product.name %>" class="nb-image">
                        </div>
                        <div class="nb-info">
                            <div class="nb-title-row">
                                <h4 class="nb-title"><%= product.name %></h4>
                            </div>
                            <div class="nb-bottom-row">
                                <span class="nb-price"><%= product.price.toLocaleString() %> dh</span>
                            </div>
                        </div>
                    </div>
                </a>
            <% }); %>
        </div>
    </div>
</div>

<div class="modal-backdrop" id="modalBackdrop"></div>
<div class="size-guide-modal" id="sizeGuideModal">
    <div class="modal-header">
        <h3 class="modal-title"><%= __('products.product_details.size_guide') %></h3>
        <button class="modal-close" id="modalClose">&times;</button>
    </div>
    <div class="modal-tabs">
        <button class="modal-tab active" data-tab="size-chart"><%= __('products.product_details.size_chart') %></button>
        <button class="modal-tab" data-tab="how-to-measure"><%= __('products.product_details.how_to_measure') %></button>
    </div>
    <div class="unit-toggle">
        <button class="unit-btn active" data-unit="in">IN</button>
        <button class="unit-btn" data-unit="cm">CM</button>
    </div>
    <div class="tab-content active" id="size-chart">
        <table class="size-table">
            <tr>
                <th>Size</th>
                <th>XS</th>
                <th>S</th>
                <th>M</th>
                <th>L</th>
                <th>XL</th>
                <th>XXL</th>
            </tr>
            <tr>
                <th><%= __('products.product_details.chest') %></th>
                <td>32-34</td>
                <td>34-36</td>
                <td>36-38</td>
                <td>38-40</td>
                <td>40-42</td>
                <td>42-44</td>
            </tr>
            <tr>
                <th><%= __('products.product_details.waist') %></th>
                <td>26-28</td>
                <td>28-30</td>
                <td>30-32</td>
                <td>32-34</td>
                <td>34-36</td>
                <td>36-38</td>
            </tr>
            <tr>
                <th><%= __('products.product_details.hips') %></th>
                <td>34-36</td>
                <td>36-38</td>
                <td>38-40</td>
                <td>40-42</td>
                <td>42-44</td>
                <td>44-46</td>
            </tr>
        </table>
    </div>
    <div class="tab-content" id="how-to-measure" style="display: none;">
        <div class="measurement-guide">
            <h4><%= __('products.product_details.measurements_title') %></h4>
            <p><%= __('products.product_details.measurements_intro') %></p>
            
            <h5><%= __('products.product_details.chest') %></h5>
            <p><%= __('products.product_details.chest_instruction') %></p>
            
            <h5><%= __('products.product_details.waist') %></h5>
            <p><%= __('products.product_details.waist_instruction') %></p>
            
            <h5><%= __('products.product_details.hips') %></h5>
            <p><%= __('products.product_details.hips_instruction') %></p>
        </div>
    </div>
    <div class="modal-pagination">
        <button class="page-btn" id="prevPage">&lt;</button>
        <button class="page-btn" id="nextPage">&gt;</button>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    console.log('🎨 Product Details page loaded');
    
    const sizeButtons = document.querySelectorAll('.size-button');
    const variantImages = document.querySelectorAll('.variant-image');
    const addToCartButton = document.querySelector('.add-to-cart');
    const selectedColorInput = document.getElementById('selectedColor');
    const selectedSizeInput = document.getElementById('selectedSize');

    // Image navigation
    const mainImage = document.getElementById('mainImage');
    const prevButton = document.getElementById('prevButton');
    const nextButton = document.getElementById('nextButton');
    const imageCounter = document.getElementById('imageCounter');
    let currentImageIndex = 0;

    // Get product images from server-side data
    const productImages = JSON.parse('<%- JSON.stringify(productImages) %>');
    console.log('Product images loaded:', productImages.length);

    // Store original product data for color switching
    const productData = {
        <% if (product.colorVariants && product.colorVariants.length > 0) { %>
            colorVariants: <%- JSON.stringify(product.colorVariants) %>,
            hasColorVariants: true
        <% } else { %>
            colors: <%- JSON.stringify(product.colors || []) %>,
            hasColorVariants: false
        <% } %>
    };
    
    console.log('Product data:', productData);

    function updateImage() {
        if (productImages[currentImageIndex]) {
            mainImage.src = productImages[currentImageIndex];
            imageCounter.textContent = `${(currentImageIndex + 1).toString().padStart(2, '0')}/${productImages.length.toString().padStart(2, '0')}`;
        }
    }

    // Image navigation buttons
    if (prevButton) {
        prevButton.addEventListener('click', () => {
            currentImageIndex = (currentImageIndex - 1 + productImages.length) % productImages.length;
            updateImage();
        });
    }

    if (nextButton) {
        nextButton.addEventListener('click', () => {
            currentImageIndex = (currentImageIndex + 1) % productImages.length;
            updateImage();
        });
    }

    // Size selection
    sizeButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            sizeButtons.forEach(btn => btn.classList.remove('selected'));
            this.classList.add('selected');
            selectedSizeInput.value = this.dataset.size;
            console.log('Size selected:', this.dataset.size);
            addToCartButton.textContent = '<%= __("products.product_details.add_to_cart") %>';
            addToCartButton.disabled = false;
        });
    });

    // Color variant selection
    variantImages.forEach((img, index) => {
        img.addEventListener('click', function() {
            console.log('Color variant clicked:', index);
            
            // Update selected state
            variantImages.forEach(image => image.classList.remove('selected'));
            this.classList.add('selected');
            
            const selectedColor = this.getAttribute('data-color');
            const colorImagesData = this.getAttribute('data-images');
            
            // Update selected color
            if (selectedColorInput) {
                selectedColorInput.value = selectedColor;
            }
            
            // Update color text display
            const selectedColorText = document.getElementById('selectedColorText');
            if (selectedColorText) {
                selectedColorText.textContent = selectedColor;
            }
            
            console.log('Color selected:', selectedColor);
            
            // Update images based on color selection
            if (productData.hasColorVariants && colorImagesData) {
                try {
                    const colorImages = JSON.parse(colorImagesData);
                    console.log('Color images for', selectedColor, ':', colorImages);
                    
                    if (colorImages && colorImages.length > 0) {
                        // Switch to first image of selected color
                        const firstColorImage = colorImages[0];
                        mainImage.src = firstColorImage;
                        
                        // Find the index of this image in the main productImages array
                        const imageIndex = productImages.findIndex(img => img === firstColorImage);
                        if (imageIndex !== -1) {
                            currentImageIndex = imageIndex;
                            updateImage();
                        }
                        
                        console.log('Switched to color image:', firstColorImage);
                    }
                } catch (e) {
                    console.error('Error parsing color images:', e);
                    // Fallback: use index-based navigation
                    currentImageIndex = index + 1;
                    updateImage();
                }
            } else {
                // Fallback for products without colorVariants
                currentImageIndex = index + 1;
                updateImage();
            }
        });
    });

    // Form submission
    const addToCartForm = document.getElementById('addToCartForm');
    if (addToCartForm) {
        addToCartForm.addEventListener('submit', function(e) {
            const size = selectedSizeInput ? selectedSizeInput.value : '';
            const color = selectedColorInput ? selectedColorInput.value : '';

            if (!size) {
                e.preventDefault();
                alert('Please select a size');
                return false;
            }

            if (!color) {
                e.preventDefault();
                alert('Please select a color');
                return false;
            }

            console.log('Adding to cart:', { size, color });
            // Form will submit normally if validation passes
        });
    }

    // Size Guide Modal functionality
    const modalBackdrop = document.getElementById('modalBackdrop');
    const sizeGuideModal = document.getElementById('sizeGuideModal');
    const modalClose = document.getElementById('modalClose');
    const sizeGuideButton = document.getElementById('sizeGuideLink');

    if (sizeGuideButton && modalBackdrop && sizeGuideModal) {
        // Show modal
        sizeGuideButton.addEventListener('click', (e) => {
            e.preventDefault();
            modalBackdrop.classList.add('active');
            sizeGuideModal.classList.add('active');
            document.body.style.overflow = 'hidden';
        });

        // Close modal functions
        const closeModal = () => {
            modalBackdrop.classList.remove('active');
            sizeGuideModal.classList.remove('active');
            document.body.style.overflow = '';
        };

        if (modalClose) {
            modalClose.addEventListener('click', closeModal);
        }
        
        modalBackdrop.addEventListener('click', closeModal);
        sizeGuideModal.addEventListener('click', e => e.stopPropagation());
    }

    // Tab Controls for size guide
    const tabs = document.querySelectorAll('.modal-tab');
    const tabContents = document.querySelectorAll('.tab-content');

    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            // Remove active class from all tabs
            tabs.forEach(t => t.classList.remove('active'));
            // Add active class to clicked tab
            tab.classList.add('active');
            
            // Hide all tab contents
            tabContents.forEach(content => {
                content.style.display = 'none';
            });
            
            // Show selected tab content
            const tabId = tab.dataset.tab;
            const targetContent = document.getElementById(tabId);
            if (targetContent) {
                targetContent.style.display = 'block';
            }
        });
    });

    // Unit Toggle for size guide
    const unitButtons = document.querySelectorAll('.unit-btn');
    const measurements = {
        in: {
            chest: ['32-34', '34-36', '36-38', '38-40', '40-42', '42-44'],
            waist: ['26-28', '28-30', '30-32', '32-34', '34-36', '36-38'],
            hips: ['34-36', '36-38', '38-40', '40-42', '42-44', '44-46']
        },
        cm: {
            chest: ['81-86', '86-91', '91-97', '97-102', '102-107', '107-112'],
            waist: ['66-71', '71-76', '76-81', '81-86', '86-91', '91-97'],
            hips: ['86-91', '91-97', '97-102', '102-107', '107-112', '112-117']
        }
    };

    unitButtons.forEach(button => {
        button.addEventListener('click', () => {
            // Toggle active class
            unitButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            
            // Convert measurements
            const unit = button.dataset.unit;
            const rows = document.querySelectorAll('.size-table tr');
            
            rows.forEach((row, rowIndex) => {
                if (rowIndex > 0) { // Skip header row
                    const measurementType = row.querySelector('th');
                    if (measurementType) {
                        const type = measurementType.textContent.toLowerCase();
                        const cells = row.querySelectorAll('td');
                        if (measurements[unit][type]) {
                            cells.forEach((cell, cellIndex) => {
                                if (measurements[unit][type][cellIndex]) {
                                    cell.textContent = measurements[unit][type][cellIndex];
                                }
                            });
                        }
                    }
                }
            });
        });
    });

    // Initialize the page
    console.log('✅ Product details page initialized');
    
    // Set initial color if available
    if (variantImages.length > 0) {
        const firstVariant = variantImages[0];
        const initialColor = firstVariant.getAttribute('data-color');
        if (selectedColorInput && initialColor) {
            selectedColorInput.value = initialColor;
        }
    }
});
</script>

<%- include('partials/footer') %>